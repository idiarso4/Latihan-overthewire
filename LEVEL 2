# Bandit Level 1 → Level 2

## Level Goal
Menemukan password untuk level selanjutnya yang tersimpan dalam file bernama `-` di home directory.

## Detailed Command Breakdown

### 1. SSH Connection
```bash
ssh bandit1@bandit.labs.overthewire.org -p 2220
```
Opsi yang tersedia:
- `-p`: Specify port number
- `-v`: Verbose mode untuk debugging
- `-i`: Gunakan private key file
- `-X`: Enable X11 forwarding
- `-C`: Enable compression

### 2. Directory Navigation
```bash
pwd                 # Print working directory
ls -la             # List all files with details
cd /home/bandit1   # Change to specific directory
```

### 3. File Reading Methods
1. Menggunakan Path Relatif:
   ```bash
   cat ./-
   ```

2. Menggunakan Path Absolut:
   ```bash
   cat /home/bandit1/-
   ```

3. Menggunakan Input Redirection:
   ```bash
   cat < -
   ```

4. Menggunakan String Concatenation:
   ```bash
   cat $(echo "-")
   ```

## Linux File System Hierarchy

### 1. Standard Directories
- `/bin`: Essential command binaries
- `/boot`: Boot loader files
- `/dev`: Device files
- `/etc`: System configuration
- `/home`: User home directories
- `/lib`: Essential shared libraries
- `/media`: Removable media
- `/mnt`: Temporary mount points
- `/opt`: Optional packages
- `/proc`: Process information
- `/root`: Root user's home
- `/sbin`: System binaries
- `/tmp`: Temporary files
- `/usr`: User programs
- `/var`: Variable data

### 2. Path Types
1. Absolute Path:
   - Dimulai dari root (/)
   - Contoh: /home/bandit1/-

2. Relative Path:
   - Relatif terhadap current directory
   - Contoh: ./-

### 3. Special Characters
- `.`: Current directory
- `..`: Parent directory
- `~`: Home directory
- `-`: Previous directory atau special character
- `/`: Directory separator

## File Permissions Deep Dive

### 1. Permission Bits
```
-rw-r--r--  1  bandit1  bandit1  33  Feb 12 10:00  -
↑ ↑↑↑ ↑↑↑ ↑↑↑  ↑   ↑       ↑     ↑      ↑       ↑
│ │││ │││ │││  │   │       │     │      │       └─ Nama File
│ │││ │││ │││  │   │       │     │      └─ Waktu Modifikasi
│ │││ │││ │││  │   │       │     └─ Ukuran (bytes)
│ │││ │││ │││  │   │       └─ Grup
│ │││ │││ │││  │   └─ Pemilik
│ │││ │││ └││─ Other Permissions
│ │││ └││─ Group Permissions
│ └││─ User Permissions
└─ File Type
```

### 2. Numeric Permissions
- 4 (read)
- 2 (write)
- 1 (execute)
- Contoh: 644 = rw-r--r--

### 3. Special Permissions
- SUID (4000)
- SGID (2000)
- Sticky Bit (1000)

## Advanced Shell Features

### 1. Command Line Operators
```bash
;    # Command separator
&&   # Logical AND
||   # Logical OR
|    # Pipe
>    # Output redirection
<    # Input redirection
>>   # Append output
2>   # Redirect stderr
2>&1 # Redirect stderr to stdout
```

### 2. Shell Expansions
```bash
*        # Wildcard
?        # Single character wildcard
[abc]    # Character class
{a,b,c}  # Brace expansion
$(cmd)   # Command substitution
$((1+1)) # Arithmetic expansion
```

### 3. Shell Variables
```bash
$PATH    # System path
$HOME    # Home directory
$USER    # Current user
$PWD     # Current directory
$?       # Last exit code
$$       # Current process ID
```

## Real-world Applications

### 1. System Administration
- Log file management
- Configuration file editing
- Batch processing
- System monitoring

### 2. Security Operations
- File integrity checking
- Permission auditing
- Security log analysis
- Access control management

### 3. Development Tasks
- Source code management
- Build script creation
- Debug log analysis
- Configuration management

## Troubleshooting Scenarios

### 1. Permission Issues
```bash
# Check file permissions
ls -l -
stat -
getcap -

# Modify permissions if needed
chmod 644 -
chown user:group -
```

### 2. Path Issues
```bash
# Verify current location
pwd
readlink -f -

# Search for file
find / -name "-" 2>/dev/null
locate -
```

### 3. Command Issues
```bash
# Debug commands
set -x
bash -x script.sh
strace command
```

## Security Best Practices

### 1. File Handling
- Verify file contents before reading
- Use secure deletion methods
- Maintain proper permissions
- Regular integrity checking

### 2. Command Execution
- Avoid command injection
- Validate input data
- Use absolute paths
- Quote variables properly

### 3. Session Security
- Use SSH keys when possible
- Enable 2FA where available
- Regular password rotation
- Session timeout settings

## Advanced Tips and Tricks

### 1. Efficiency Shortcuts
```bash
!!      # Repeat last command
!$      # Last argument of previous command
ctrl-r  # Search command history
alt-.   # Insert last argument
```

### 2. File Operations
```bash
cp -p   # Preserve permissions
mv -i   # Interactive move
rm -i   # Interactive remove
ls -R   # Recursive listing
```

### 3. Text Processing
```bash
grep -r  # Recursive search
sed -i   # In-place editing
awk -F   # Field separator
sort -n  # Numeric sort
```

## Reference Commands
```bash
man bash
info coreutils
help cd
whatis command
apropos keyword
```

## Additional Resources
1. Documentation:
   - Linux Documentation Project
   - GNU Coreutils Manual
   - Bash Reference Manual

2. Online Resources:
   - Linux Command Library
   - Shell Scripting Tutorial
   - Linux Security Guide

3. Practice Environments:
   - Linux Labs
   - Virtual Machines
   - Docker Containers
