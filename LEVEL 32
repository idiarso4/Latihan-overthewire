# Bandit Level 31 â†’ Level 32

## Level Goal
Menemukan password untuk level selanjutnya dengan menghadapi shell yang telah dimodifikasi untuk mengubah semua input menjadi uppercase. Kita perlu menemukan cara untuk keluar dari shell ini.

## Detailed Command Breakdown

### 1. SSH Connection
```bash
ssh bandit31@bandit.labs.overthewire.org -p 2220
```

### 2. Shell Investigation
```bash
# Check current shell
echo $SHELL
ps -p $$

# View environment
env
set
```

## Shell Escaping

### 1. Command Execution
```bash
# Direct commands
$0
sh
bash

# Shell options
set +o noclobber
set -o posix

# Execute shell
exec /bin/bash
exec /bin/sh
```

### 2. Special Variables
```bash
# Shell variables
$SHELL
$BASH
$0

# Process info
$$
$PPID
$?
```

### 3. Shell Features
```bash
# Shell type
echo $0
ps -p $$ -o comm=

# Shell options
shopt
set -o
```

## Environment Control

### 1. Variable Management
```bash
# Set variables
export VAR=value
declare -x VAR=value

# Unset variables
unset VAR
env -i command
```

### 2. Path Control
```bash
# View path
echo $PATH
which command

# Modify path
export PATH=/usr/local/bin:$PATH
PATH=/custom/path command
```

### 3. Shell Settings
```bash
# Shell options
set -o option
set +o option

# Shell behavior
shopt -s option
shopt -u option
```

## Process Control

### 1. Process Execution
```bash
# Run process
exec command
system("command")

# Background jobs
command &
nohup command
```

### 2. Job Control
```bash
# List jobs
jobs
ps

# Control jobs
fg %1
bg %1
```

### 3. Signal Handling
```bash
# Send signals
kill -TERM pid
killall process

# Trap signals
trap 'handler' SIGTERM
trap - SIGTERM
```

## File Operations

### 1. File Redirection
```bash
# Input redirection
command < file
command << EOF

# Output redirection
command > file
command >> file
```

### 2. File Descriptors
```bash
# Standard streams
0< file  # stdin
1> file  # stdout
2> file  # stderr

# Combining streams
&> file
2>&1
```

### 3. Here Documents
```bash
# Basic heredoc
cat << EOF
content
EOF

# Quoted heredoc
cat << 'EOF'
$content
EOF
```

## Shell Programming

### 1. Control Structures
```bash
# Conditionals
if [ condition ]; then
    commands
fi

# Loops
while read line; do
    process "$line"
done
```

### 2. Function Definition
```bash
# Define function
function_name() {
    commands
}

# Export function
export -f function_name
```

### 3. Error Handling
```bash
# Check status
if [ $? -ne 0 ]; then
    handle_error
fi

# Set error trap
trap 'error_handler' ERR
```

## Security Considerations

### 1. Input Validation
```bash
# Check input
[[ $input =~ ^[0-9]+$ ]]
[[ $input == *[!a-zA-Z0-9]* ]]

# Sanitize input
input=${input//[^a-zA-Z0-9]/}
```

### 2. Path Security
```bash
# Safe path
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin

# Full paths
/usr/bin/command
"${BASH_SOURCE[0]}"
```

### 3. Privilege Control
```bash
# Drop privileges
sudo -u nobody command
su nobody -c command

# Set limits
ulimit -n 1024
nice -n 19 command
```

## Debugging Techniques

### 1. Shell Debug
```bash
# Enable debug
set -x
set -v

# Debug output
PS4='${BASH_SOURCE}:${LINENO}: '
export BASH_XTRACEFD=1
```

### 2. Process Debug
```bash
# Trace execution
strace command
ltrace command

# Debug info
ps auxf
pstree -p $$
```

### 3. Environment Debug
```bash
# Show environment
env
printenv

# Variable info
declare -p
set
```

## Best Practices

### 1. Shell Security
- Input validation
- Path security
- Privilege control
- Error handling

### 2. Code Quality
- Clear structure
- Good documentation
- Error handling
- Clean exit

### 3. Maintenance
- Version control
- Documentation
- Testing
- Monitoring

## Additional Resources

### 1. Man Pages
```bash
man bash
man set
man trap
man exec
```

### 2. Documentation
- Bash Guide
- Shell Security
- Best Practices
- Debug Guide

### 3. Tools
- Shell checkers
- Debug tools
- Security scanners
- Process monitors
