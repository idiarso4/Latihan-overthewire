# Bandit Level 14 â†’ Level 15

## Level Goal
Menemukan password untuk level selanjutnya dengan mengirimkan password level ini ke port 30000 pada localhost.

## Detailed Command Breakdown

### 1. SSH Connection
```bash
ssh bandit14@bandit.labs.overthewire.org -p 2220
```

### 2. Network Service Connection
```bash
# Using netcat
nc localhost 30000

# Using telnet
telnet localhost 30000

# Using /dev/tcp
echo "password" > /dev/tcp/localhost/30000
```

## Network Tools

### 1. Netcat (nc)
```bash
# Basic connection
nc host port
nc -v host port

# Listen mode
nc -l -p port
nc -lvp port

# File transfer
nc -l -p port > file    # receiver
nc host port < file     # sender

# Port scanning
nc -zv host port-range
nc -zv 192.168.1.1 20-30
```

### 2. Telnet
```bash
# Basic connection
telnet host port

# With options
telnet -l user host
telnet -b src_addr host

# Debug mode
telnet -d host port
```

### 3. Socat
```bash
# TCP connection
socat - TCP:host:port

# Listen mode
socat TCP-LISTEN:port -

# With SSL
socat openssl-connect:host:port -
socat openssl-listen:port -

# File transfer
socat TCP-LISTEN:port,fork file:data
socat TCP:host:port file:data
```

## Network Analysis

### 1. Port Scanning
```bash
# Using nmap
nmap -p port host
nmap -p- host
nmap -sV host

# Using netcat
nc -zv host 1-1000
nc -w1 host port

# Using telnet
for p in {1..1000}; do
  telnet host $p
done
```

### 2. Traffic Analysis
```bash
# Using tcpdump
tcpdump port 80
tcpdump host target
tcpdump -i eth0

# Using wireshark cli
tshark -i eth0
tshark -f "port 80"
tshark -Y "http"
```

### 3. Connection Testing
```bash
# Using curl
curl -v host:port
curl -I host:port
curl --trace - host

# Using wget
wget -d host:port
wget --debug host
```

## Service Discovery

### 1. DNS Tools
```bash
# Basic lookup
dig domain
nslookup domain

# Reverse lookup
dig -x ip_address
nslookup ip_address

# Service records
dig _service._proto.domain SRV
```

### 2. Service Scanning
```bash
# Version detection
nmap -sV host

# Script scanning
nmap -sC host

# UDP services
nmap -sU host
```

### 3. Banner Grabbing
```bash
# Using netcat
echo "" | nc -v host port

# Using telnet
telnet host port

# Using curl
curl -v telnet://host:port
```

## Connection Management

### 1. Keep-Alive
```bash
# Using netcat
nc -k -l port

# Using socat
socat TCP-LISTEN:port,fork,reuseaddr -

# Using telnet
while true; do
  telnet host port
  sleep 1
done
```

### 2. Timeouts
```bash
# Netcat timeout
nc -w timeout host port

# Curl timeout
curl --connect-timeout 10 host

# Wget timeout
wget --timeout=10 host
```

### 3. Multiple Connections
```bash
# Parallel nc
for i in {1..10}; do
  nc host port &
done

# With xargs
seq 10 | xargs -P10 -I{} nc host port
```

## Protocol Handling

### 1. HTTP
```bash
# GET request
printf "GET / HTTP/1.0\r\n\r\n" | nc host 80

# POST request
printf "POST /path HTTP/1.0\r\nContent-Length: 5\r\n\r\ndata" | nc host 80

# Headers only
printf "HEAD / HTTP/1.0\r\n\r\n" | nc host 80
```

### 2. SMTP
```bash
# Mail test
nc mail.server 25 << EOF
HELO domain
MAIL FROM: <sender@domain>
RCPT TO: <recipient@domain>
DATA
Subject: Test
Test email
.
QUIT
EOF
```

### 3. Custom Protocols
```bash
# Raw data
echo -n "custom_data" | nc host port

# Hex data
echo "0x41424344" | xxd -r -p | nc host port

# With timing
(echo "data1"; sleep 1; echo "data2") | nc host port
```

## Security Considerations

### 1. Encryption
```bash
# SSL/TLS connection
openssl s_client -connect host:port

# With specific protocol
openssl s_client -tls1_2 -connect host:port

# Certificate verification
openssl s_client -verify 2 -connect host:port
```

### 2. Authentication
```bash
# Basic auth
echo -n "user:pass" | base64
curl -u user:pass host

# Token auth
curl -H "Authorization: Bearer token" host
```

### 3. Firewalls
```bash
# Check if blocked
nc -zv host port

# Alternative ports
nc -zv host 80,443,8080

# Through proxy
nc -X connect -x proxy:port host target_port
```

## Troubleshooting

### 1. Common Issues
- Connection refused
- Connection timeout
- Wrong protocol
- Firewall blocking

### 2. Solutions
```bash
# Debug mode
nc -v host port
telnet -d host port

# Check service
netstat -tuln | grep port
ss -tuln | grep port

# Test connectivity
ping host
traceroute host
```

### 3. Logging
```bash
# Network traffic
tcpdump -i any port port
wireshark -i any -f "port port"

# System logs
tail -f /var/log/syslog
journalctl -f
```

## Best Practices

### 1. Connection Handling
- Use timeouts
- Handle errors
- Clean up connections
- Log activity

### 2. Security
- Encrypt sensitive data
- Validate input
- Use authentication
- Monitor access

### 3. Performance
- Connection pooling
- Load balancing
- Caching
- Monitoring

## Additional Resources

### 1. Man Pages
```bash
man nc
man telnet
man socat
man tcpdump
```

### 2. Documentation
- Network Protocols
- Security Standards
- Performance Tuning
- Debugging Tools

### 3. Tools
- Network analyzers
- Protocol testers
- Monitoring tools
- Security scanners
